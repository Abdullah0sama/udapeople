version: 2.1

commands:
  destroy-environment:
    description: Destroy environment on failure when creating infrastructure
    steps:
      - run:
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker: 
        - image: node:14
    steps:
      - checkout
      - run: 
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: frontend-build

  test-frontend:
    docker: 
        - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Scan frontend
          command: |
            cd frontend
            # npm install
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical

  build-backend:
    docker: 
        - image: node:14
    steps:
      - checkout
      - run: 
          name: Build Backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - "backend/node_modules"
          key: backend-build

  test-backend:
    docker: 
        - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run: 
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
      
  scan-backend:
    docker:
      - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Scan backend
          command: |
            cd backend
            # npm install
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum update -y && yum -y install tar gzip
      - run:
          name: create backend infrastructure
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: create frontend infrastructure
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run: 
          name: get EC2 IPs
          command: |
            aws ec2 describe-instances \
            --filter "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project/
          paths:
            - ".circleci/ansible/inventory.txt"
      - destroy-environment

  
workflows:
  dev:
    jobs:
      - build-backend
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - test-backend
      - scan-frontend:
          requires:
            - test-frontend
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend

