version: 2.1

commands:
  destroy-environment:
    description: Destroy environment on failure when creating infrastructure
    steps:
      - run:
          when: on_fail
          name: Install aws-cli if doesn't exist
          command: |
            if ! command -v aws &> /dev/null
            then
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip awscliv2.zip
                ./aws/install
            fi
      - run:
          when: on_fail
          name: Destroy environment 
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive;
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7};
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7};
  revert-migration:
    description: revert migration
    steps:
      - run:
          when: on_fail
          name: Revert migrations
          command: |
            export Success=$(curl --insecure https://kvdb.io/3HLz3UMSmAJtaLKt7Y5Uz1/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if [[ "${Success}" == "1" ]]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
jobs:
  build-frontend:
    docker: 
        - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run: 
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: frontend-build

  test-frontend:
    docker: 
        - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Scan frontend
          command: |
            cd frontend
            # npm install
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical

  build-backend:
    docker: 
        - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run: 
          name: Build Backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - "backend/node_modules"
          key: backend-build

  test-backend:
    docker: 
        - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run: 
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
      
  scan-backend:
    docker:
      - image: node:14
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run:
          name: Scan backend
          command: |
            cd backend
            # npm install
            # npm audit fix --audit-level=critical --force
            # npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum update -y && yum -y install tar gzip
      - run:
          name: create backend infrastructure
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: create frontend infrastructure
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run: 
          name: get EC2 IPs
          command: |
            aws ec2 describe-instances \
            --filter "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text >> .circleci/ansible/inventory.txt
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/project/
          paths:
            - ".circleci/ansible/inventory.txt"
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.9.15-alpine3.16

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "46:b1:c2:e9:10:39:f9:58:1d:df:65:f7:bb:b4:0b:11"
      - attach_workspace:
          at: ~/project/

      - run: apk add  tar gzip openssh
      - run: 
          name: Install ansible
          command: python3 -m pip install ansible
      - run: 
          name: Run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
  
  run-migrations:
    docker:
      - image: node:13
    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - run: 
          name: run migration
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run: cat backend/migrations_dump.txt
      - run: 
          name: send migrations to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then
              echo migration took place
              curl --insecure https://kvdb.io/3HLz3UMSmAJtaLKt7Y5Uz1/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              exit 0
            fi


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run: yum update -y && yum -y install tar gzip
      - run: |
          curl -fsSL https://rpm.nodesource.com/setup_14.x | bash -
          yum -y install nodejs
      - run: 
          name: set API_URL
          command: |
            export Backend_IP=$(aws ec2 describe-instances \
              --filter "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            export API_URL="http://${Backend_IP}:3030"
            echo API_URL="${API_URL}" >>  frontend/.env
            echo $API_URL
      - run: echo $Backend_IP > backend_address.txt
      - run: 
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - revert-migration
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.9.15-bullseye

    steps:
      - checkout
      - restore_cache:
          key: backend-build
      - add_ssh_keys:
          fingerprints:
            - "46:b1:c2:e9:10:39:f9:58:1d:df:65:f7:bb:b4:0b:11"
      - attach_workspace:
          at: ~/project/
      - run: apt-get install -y tar gzip openssh-client
      - run: |
          curl -fsSL https://deb.nodesource.com/setup_14.x |  bash - && \
          apt-get install -y nodejs
      - run: 
          name: Install ansible
          command: python3 -m pip install ansible
      - run: 
          name: transfer build 
          command: |
              cd backend
              npm i
              npm run build
              cd ..
              mkdir ./.circleci/ansible/roles/deploy/files/ 
              tar -C backend -czvf .circleci/ansible/roles/deploy/files/artifact.tar.gz  .

      - run: 
          name: Run playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
          
      - revert-migration
      - destroy-environment

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: | 
          export BACKEND_IP=$(aws ec2 describe-instances \
                --filter "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --output text)
          echo "export BACKEND_IP=${BACKEND_IP}" >> "$BASH_ENV"
          
      - run: |
                curl -fsSL https://rpm.nodesource.com/setup_14.x | bash -
                yum -y install nodejs
      - run:
          name: Backend smoke test
          command: |
            sleep 1m
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run: 
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - revert-migration
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudformation
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name initialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople

workflows:
  dev:
    jobs:
      - build-backend
      - build-frontend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires:
            - scan-frontend
            - scan-backend
            - test-backend
            - test-frontend
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-frontend: 
          requires:
            - run-migrations
      - deploy-backend: 
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - cloudfront-update:
          requires:
            - smoke-test